################################################
依赖注入
有如下两种方式
//构造方法依赖注入，初始化A的时候才指明使用哪个B对象
public class A {
    B b;
    public void A(B b) {
        this.b = b;
    }
}

//set()方法依赖注入，初始化A后，再通过set方法，将需要的B对象赋值
public class A {
    B b;
    public void setB(B b) {
        this.b = b;
    }
}


  
################################################
Dagger
1 使用 https://zhuanlan.zhihu.com/p/32772661
在例子中，MainPresenter是要注入的类，MainActivity是使用的地方
@Inject注解会用在step 1 和3
1）MainPresenter的构造函数用 @Inject 注解
    class MainPresenter @Inject constructor() 
2）定义 Interface MainComponent, 作用是桥接MainPresenter 和MainActivity
    Interface 用@Componnet注解
    定义inject方法, 参数为MainActivity
         fun inject(mainActivity: MainActivity)
    重新编译代码，会自动生成DaggerMainComponent
3) 在MainActivity中实现注入
    用lateinit声明变量，并用@Inject注解
        lateinit var mainPresenter: MainPresenter
    调用自动生成的DaggerMainComponent实现注入
        DaggerMainComponent.builder().build().inject(this)
    
    
