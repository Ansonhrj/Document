Log.d(TAG, "From: ${remoteMessage?.from}")
	//变量是string， 直接 $name
	//用对象的某个string属性 ¥、${people.name}

Any是所有类的基类
Unit类似java的void，当一个函数没有返回值的时候，我们用 Unit 来表示这个特征，而不是 null 

#################################################
习惯简写方法
#################################################
1 如果 Lambda 是函数的最后一个参数，你可以把 Lambda 写在括号的外面
val product = items.fold(1， { acc, e -> acc * e })
写成 val product = items.fold(1) { acc, e -> acc * e }

如果该 lambda 表达式是调用时唯一的参数，那么圆括号可以完全省略：
val product = items.fold({ acc, e -> acc * e })
写成 val product = items.fold{ acc, e -> acc * e }

一个 lambda 表达式只有一个参数，使用it：单个参数的隐式名称
ints.filter {it -> it > 0 }
写成ints.filter { it > 0 }

2 使用接口创建匿名类（实例）
（1）一般接口
fun interface IntPredicate {
   fun accept(i: Int): Boolean
}
// 创建一个类的实例
val isEven = object : IntPredicate {    //使用object关键字，IntPredicate是接口
   override fun accept(i: Int): Boolean {
       return i % 2 == 0
   }
}

（2）函数式 (SAM)接口
fun interface IntPredicate {
   fun accept(i: Int): Boolean
}
// 通过 lambda 表达式创建一个实例
val isEven = IntPredicate { it % 2 == 0 }   //isEven就是一个实例了。 it就是接口中唯一那个抽象方法的参数，lambda的方法体就是抽象方法的实现

fun main() {
   println("Is 7 even? - ${isEven.accept(7)}")
}


#################################################
启动另一个 activity， https://developer.android.com/training/basics/firstapp/starting-activity?hl=zh-cn
	val intent = Intent(this, DisplayMessageActivity::class.java).apply {
            putExtra(EXTRA_MESSAGE, message)
        }
        startActivity(intent)

#################################################
类型转换
	1 将 String？ 转化成 String
		it.body as String






################################################
反射
https://juejin.im/post/5be5576ef265da61616e331d


################################################
依赖注入
有如下两种方式
//构造方法依赖注入，初始化A的时候才指明使用哪个B对象
public class A {
    B b;
    public void A(B b) {
        this.b = b;
    }
}

//set()方法依赖注入，初始化A后，再通过set方法，将需要的B对象赋值
public class A {
    B b;
    public void setB(B b) {
        this.b = b;
    }
}








